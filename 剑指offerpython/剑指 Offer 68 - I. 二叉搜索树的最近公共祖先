三种情况
在root遍历中，
p, q都在root的左子树，update root到root.left
都在root的右子树，同理
p,q在root的左边和右边，反之亦然，return root
#迭代
def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if p is None:
            return q
        if q is None:
            return p
        if not root:
            return None
        while root:
            if root.val < p.val and root.val < q.val:
                root  = root.right
            if root.val > p.val and root.val > q.val:
                root = root.left
            else:
                return root
                
                
    #递归            
  def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if p is None:
            return q
        if q is None:
            return p
        if not root:
            return None
        if root.val == p.val or root.val == q.val or q.val < root.val < p.val or p.val < root.val < q.val:
            return root
        
        if root.val < p.val and root.val < q.val:
            return self.lowestCommonAncestor(root.right, p, q)
        if root.val > p.val and root.val > q.val:
            return self.lowestCommonAncestor(root.left, p, q)
            
        
