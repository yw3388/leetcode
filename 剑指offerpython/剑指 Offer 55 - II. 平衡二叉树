class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        if not root:
            return True
        depth_l = 0
        depth_r = 0
        
        if abs(self.get_depth(root, depth_l)- self.get_depthr(root, depth_r)) <= 1:
            return True
        return False
    def get_depth(self, node, length):
        if not node:
            return 0
        return self.get_depth(node.left, length+1)
    def get_depthr(self, node, length):
        if not node:
            return 0
        return self.get_depthr(node.right, length+1)
        
        
        
##get_depth wrong, should be node.left's max left and right + 1


class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        if not root:
            return True
        
        
        
        return self.isBalanced(root.right) and self.isBalanced(root.left) and abs(self.get_depth(root.left)- self.get_depth(root.right)) <= 1
    def get_depth(self, node):
        if not node:
            return 0
        return max(self.get_depth(node.left),self.get_depth(node.right))+1
        
        
        
        ##对一个左子树来说，深度是左子树和右子树的max，每一层都查左右差
##get_depth wrong, should be node.left's max left and right + 1




class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        return self.recur(root) != -1
        
        
        
    def recur(self, root):
        if not root:
            return 0
        if root:
            
            left = self.recur(root.left)
            if left == -1:
                return -1
        
            right = self.recur(root.right)
            if right == -1:
                return -1
            if  abs(left - right) > 1:
                return -1
            elif abs(left - right) <= 1:
                return max(left, right) + 1
                
                
 ##C language default value is 0
