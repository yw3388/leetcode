输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。

输入：nums = [1,2,3,4]
输出：[1,3,2,4] 
注：[3,1,2,4] 也是正确的答案之一。
def exchange(self, nums: List[int]) -> List[int]:
        i, j = 0, len(nums)-1
        while i < j and i < len(nums) and j > 0:
            if nums[i] % 2 == 1:
                i += 1
            elif nums[i] % 2 == 0 and nums[j] % 2 == 1:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
                j -= 1
            elif nums[j] % 2 == 0:
                j -= 1
        return nums




def exchange(self, nums: List[int]) -> List[int]:
        i, j = 0, len(nums) -1
        while i < j:
            #i is not point to odd, continue
            if nums[i] & 1 != 0:
                i += 1
                continue
            if nums[j] & 1 != 1:
                j -= 1
                continue
            nums[i], nums[j] = nums[j], nums[i]
            i +=1
            j -=1
           
        return nums


快慢指针找奇数

class Solution:
    def exchange(self, nums: List[int]) -> List[int]:
        ##slow and fast
        ##slow points to next odd number position, and fast to find odd
        slow, fast = 0, 0
        while slow <= fast and fast < len(nums):
            #find an odd number: 3 ways of bitwise
            #if nums[fast] & 1 == 1:
            #if nums[fast] ^ 1 != nums[fast] + 1:
            ## n|1 is greater then n, then even, else odd 
            if nums[fast] | 1 <= nums[fast]:
                
                nums[slow], nums[fast] = nums[fast], nums[slow]
                slow += 1
            fast += 1
        return nums
