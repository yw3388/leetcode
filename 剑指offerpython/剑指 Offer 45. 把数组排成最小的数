
输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。

 

示例 1:

输入: [10,2]
输出: "102"
示例 2:

输入: [3,30,34,5,9]
输出: "3033459"


思路：实现一个排序，定义排序用sorted(iterable, key = functools.cmp_to_key())
两个strings相连，直接比较大小

‘’‘’放数字的顺序肯定是先放第一位(最左边一位)最小的元素，如果第一位相等，比较第二位....，以此类推。

我们再思考一下，36 < 38 > 5 ，但是 "36" < "38" < "5"，

也就是我们如果把所有数字转换成字符串再排列，刚好就是我们希望的情况。

注意：我们这里说的排列大小比较和字符串大小有点区别，比如 3 和 30，明显 30 排在前面比较好，所以我们要重构比较，我们组合 s1 和 s2 ，如果 s1 + s2 > s2 + s1，那么 s1 > s2


def minNumber(self, nums: List[int]) -> str:
        #alist = []
        #nums = [self.digits(nu, alist) for nu in nums]
        nums = [str(n) for n in nums]
        def order(n, n2):
            if n + n2 == n2 + n:
                return 0
            elif n + n2 > n2 + n:
                return 1
            else:
                return -1
        return ''.join(sorted(nums, key = functools.cmp_to_key(order)))
