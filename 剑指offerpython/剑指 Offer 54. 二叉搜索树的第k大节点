class Solution:
    def kthLargest(self, root: TreeNode, k: int) -> int:
        lists = []
        self.helper(root, lists)
        return lists[len(lists) - k]


    def helper(self, root, lists):
    #in order
        if root is None:
            return
        if root.left:
            self.helper(root.left, lists)
        lists.append(root.val)
        if root.right:
            self.helper(root.right, lists)
        


class Solution:
    def kthLargest(self, root: TreeNode, k: int) -> int:
        lists =[]
        #more nodes to deal with
        while root or lists:
            #if root still has right children
            while root:
                lists.append(root)
                root = root.right
            #deal with nodes in list and iterate left children
            root = lists.pop()
            k -= 1
            if k == 0:
                return root.val
            root = root.left
