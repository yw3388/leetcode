
Given an integer n and an integer start.

Define an array nums where nums[i] = start + 2*i (0-indexed) and n == nums.length.

Return the bitwise XOR of all elements of nums.



Input: n = 5, start = 0
Output: 8
Explanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.
Where "^" corresponds to bitwise XOR operator.


ifstart % 4 == 0 or 1, the second bit from right must be 0, so start ^ (start+2) == 2ï¼Œ(start + 2) ^ (start + 4) == 2 .....
if n % 4 == 0, there will be an even number of 2, and the xor of them is 0.
if n % 4 == 1, you can exclude the last number which is start + 2 * (n - 1). The xor of left numbers is 0, so the result is last.



Not understand parts
(last -4, last -2, last)

if n % 4 == 2, you can exclude the last two numbers. The xor of left numbers is 0, so the result is the xor of last two numbers which is 2.
if n % 4 == 3, you can exclude the last three numbers. The xor of left numbers is 0, so the result is the xor of last three numbers which is 2 ^ last.

if start % 4 == 2 or 3, the second bit from right is 1, but the (start + 2) % 4 == 0 or 1. So we can exclude the first number. So the solution to calculate the left numbers is the same as the solution above.
