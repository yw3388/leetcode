一种方式是dfs
每一次visit，就加上visited（满足条件）


one： 
def digitsum(self, n):
        ans = 0
        while n:
            ans += n % 10
            n //= 10
        return ans
        

    
def dfs(self, i, j, m, n, k):
        """
        if not meet requirements, return 0 else mark visited and return 1 + more 
        """
        
        if i >= m or j >= n or k < self.digitsum(i) + self.digitsum(j) or self.visited[i][j]:
            return 0
        self.visited[i][j] = True
        
        return 1 + self.dfs(i+1, j, m, n, k) + self.dfs(i, j+1, m, n, k)


 def movingCount(self, m, n, k):
        """
        :type m: int
        :type n: int
        :type k: int
        :rtype: int
        """

        self.visited = [[0 for _ in range(n)] for _ in range(m)]
        return self.dfs(0, 0, m, n, k)
    


two：
def digitsum(self, n):
        ans = 0
        while n:
            ans += n % 10
            n //= 10
        return ans
        
def movingCount(m, n, k):
    """
    if -1 visited before and sum <= k, add to visited
    """
    vis = [(0, 0)]
    for i in range(m):
        for j in range(n):
            if ((i - 1, j) in vis or (i, j - 1) in vis) and digitsum(i) + digitsum(j) <= k:
                vis.append((i, j))
    return len(set(vis))
   



另一种方法
广度优先，用queue实现
one：
#breadth first search, add first visited node's closest positions
from queue import Queue
q = []
q.append((0, 0))
#use a set to add point as visited
s = set()
while q:
    x, y = q.pop()
    ##add up to k then add x y in set,满足条件才加入set中
    if (x, y) not in s and 0 <= x < m and 0 <= y < n and digitsum(x) + digitsum(y) <= k:
        s.add((x, y))
        ##for all children, add children nodes into queue to be fixed
        for nx, ny in [(x+1,y), (x, y+1)]:
            q.append((nx, ny))
len(s)



two
visited = [[_ for i in range(m)] for j in range(n)]
q= []
q.append((0, 0))
while q:
    x = q.pop()
    i, j = x[0], x[1]
    if i >= m or j >= n or digitsum(i) + digitsum(j) > k or visited[i][j]:
        continue
    #只要visit过
    visited[i][j]  = True
    q.append((i+1, j))
    q.append((i, j+1))
len(visited)


关键点在计算i和j的和
3 + 5 + 1 + 2

35， 12

方法：不断//=10，加上每次的个位数，直到=0

